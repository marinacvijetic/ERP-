package bakery.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import bakery.model.TblOrder;
import bakery.request.OrderItemResponse;
import bakery.request.OrderResponse;
import bakery.service.OrderService;

@RestController
@RequestMapping("/order")
public class OrderController {
	
	@Autowired
	private OrderService orderService;
	
	@GetMapping("")
	public ResponseEntity<List<OrderResponse>> getAllOrder(){
		List<TblOrder> orders = orderService.getAllOrder();
		List<OrderResponse> responses = orders.stream().map(x -> {
			OrderResponse response = new OrderResponse();
			response.setOrderId(x.getOrderId());
			response.setOrderDate(x.getOrderDate());
			response.setTotal(x.getTotal());
			response.setOrderItemsItems(x.getOrderItems().stream().map(i -> {
				OrderItemResponse itemResponse = new OrderItemResponse();
				itemResponse.setOrderItemId(i.getOrderItemId());
				itemResponse.setQuantity(i.getQuantity());
				itemResponse.setProduct(i.getProduct());
				return itemResponse;
			}).collect(Collectors.toList()));
			response.setUser(x.getuser());
			response.setStatusId(x.getStatus());
		})
		
		return new ResponseEntity<>(orders, HttpStatus.OK);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<TblOrder> getOrderById(@PathVariable Long id){
		TblOrder order = orderService.getOrderById(id);
		if(order == null) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		} else {
			return new ResponseEntity<>(order, HttpStatus.OK);
		}
	}
	
	@PostMapping("")
	public ResponseEntity<TblOrder> addOrder(@RequestBody TblOrder order){
		TblOrder newOrder = orderService.addOrder(order);
		return new ResponseEntity<>(newOrder, HttpStatus.CREATED);
	}

	@PutMapping("/{id}")
	public ResponseEntity<TblOrder> updateOrder(@PathVariable Long id, @RequestBody TblOrder order){
		TblOrder updatedOrder = orderService.updateOrder(id, order);
		if(updatedOrder==null) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}else {
			return new ResponseEntity<>(updatedOrder, HttpStatus.OK);
		}
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteOrder(@PathVariable Long id){
		orderService.deleteOrderById(id);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
}
